const express = require('express');
const User=require('../models/user');
const router = express.Router();
const bcrypt= require('bcrypt');
const jwt=require('jsonwebtoken');
const { validateSignUp, validateLogin } = require('../middleware/validator');
const verify = require('../middleware/verify');
const CustomError = require('../helpers/customeError');



// SignUp users
router.post('/signUp',validateSignUp,async(req,res,next)=>{
	const {username,age,role,password} = req.body;
    const hashedPassword= await bcrypt.hash(password,12)

		const createdUser = new User({
			username,
			age,
            role,
			password:hashedPassword
		})
		await createdUser.save()
		res.send(createdUser);

})

//login 
router.post('/login',validateLogin,async (req,res,next)=>{
    const {username,password}=req.body;
  
    const user=await User.findOne({username});
    if(!user)
   {
     throw new CustomError("invalid credentials",400);
   }

    const isMatch= bcrypt.compare(password, user.password)
    if(!isMatch)
    {
        throw new CustomError("invalid credentials",400);

    }

    const payload={id:user._id};
    const token = jwt.sign(payload,"secretKey");

    res.json(
        {
            message:"logged in",
            token,
            user
        }
    )
})

//update 
router.patch('/:id',
verify  
,async(req,res,next)=>{

    await User.findByIdAndUpdate(req.params.id,req.body);
    console.log('update success');


})


router.delete('/:id',
verify
,async(req,res,next)=>{

    //check if role == admin 
    if(req.user.role === "admin"){
        await User.findByIdAndDelete(req.params.id);
        console.log('delete succcess');
    }
    else{
        console.log('Only admin has the permissin to delete ');

    }

    
})





module.exports = router;
